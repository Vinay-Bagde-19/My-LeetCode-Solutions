/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 * public int get(int index) {}
 * public int length() {}
 * }


You may recall that an array arr is a mountain array if and only if:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.
You cannot access the mountain array directly. You may only access the array using a MountainArray interface:
MountainArray.get(k) returns the element of the array at index k (0-indexed).
MountainArray.length() returns the length of the array.
Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

Example 1:
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.

Example 2:
Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.
 */

class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeakIndex(mountainArr);

        int firstTry = orderAgnosticBS(mountainArr, target, 0, peak);
        if (firstTry != -1) {
            return firstTry;
        }
        // try to search in second half
        return orderAgnosticBS(mountainArr, target, peak, mountainArr.length() - 1);

    }

    private int findPeakIndex(MountainArray mountainArr) {
        int left = 0;
        int right = mountainArr.length() - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            // Compare the current element with the next element
            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                // If the current element is less than the next element, move to the right
                left = mid + 1;
            } else {
                // Otherwise, move to the left
                right = mid;
            }
        }

        // The left pointer will be at the peak element's index
        return left;
    }

    public static int orderAgnosticBS(MountainArray mountainArr, int target, int start, int end) {
        // Find whether the array is sorted in Ascending or Descending
        boolean isAsc = mountainArr.get(start) < mountainArr.get(end);

        while (start <= end) {
            int mid = start + (end - start) / 2;

            // If mid is equal to target return mid
            if (mountainArr.get(mid) == target) {
                return mid;
            }

            // Check if it is Ascending
            if (isAsc) {
                if (target < mountainArr.get(mid)) {
                    end = mid - 1;
                } else if (target > mountainArr.get(mid)) {
                    start = mid + 1;
                }
            } else { // Do this when it is Descending
                if (target > mountainArr.get(mid)) {
                    end = mid - 1;
                } else if (target < mountainArr.get(mid)) {
                    start = mid + 1;
                }
            }
        }
        return -1;
    }
}
